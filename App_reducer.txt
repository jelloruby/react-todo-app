import React, { useRef, useCallback, useReducer } from 'react'
import './App.css';

import CreateUser from './components/CreateUser'
import UserList from './components/UserList'

function countActiveUsers(users) {
  console.log('활성 사용자 수를 세는중...');
  return users.filter(user => user.active).length;
}

// state
const initialState = {
  inputs: {
    username: '',
    email: ''
  },
  users: [
    {
      id: 1,
      username: 'velopert',
      email: 'public.velopert@gmail.com',
      active: true
    },
    {
      id: 2,
      username: 'tester',
      email: 'tester@example.com',
      active: false
    },
    {
      id: 3,
      username: 'liz',
      email: 'liz@example.com',
      active: false
    }
  ]
}

// reducer
function reducer(state, action) {       // state: 현재 상태, action : 업데이트를 위한 정보
  switch (action.type) {
    case 'CHANGE_INPUT':                // state update : input 에 입력시
      return {
        ...state,
        inputs: {
          ...state.inputs,
          [action.name] : action.value  // 입력된 value 를 name 으로 받아서 실행
        }
      };
    case 'CREATE_USER':
      return {
        inputs: initialState.inputs,
        users: state.users.concat(action.user)
    };

    case 'TOGGLE_USER':
      return {
        ...state,
        users: state.users.map(user =>
          user.id === action.id ? {...user, active : !user.active} : user)
    };

    case 'REMOVE_USER':
      return {
        ...state,
          users: state.usres.filter(user => user.id !== action.id)
    };
  
    default:
      return state;
  }
}


function App() {
  const [state, dispatch] = useReducer(reducer, initialState)
  const nextId = useRef(4);

  const { users } = state;
  const { username, email } = state.inputs;

  const onChange = useCallback(e => {
    const { name, value } = e.target;
    dispatch({                          // action을 보냄
      type: 'CHANGE_INPUT',
      name,
      value
    })
  }, [])
  
  const onCreate = useCallback(() => {
    dispatch({
      type: 'CREATE_USER',
      user: {
        id: nextId.current,
        username,
        email
      }
    })
    nextId.current += 1;
  }, [username, email])

  const onToggle = useCallback(id => {
    dispatch({
      type: 'TOGGLE_USER',
      id
    })
  }, [])

  const onRemove = useCallback(id => {
    dispatch({
      type: 'REMOVE_USER',
      id
    })
  }, [])

  return (
    <>
      <CreateUser
        username={username}
        email={email}
        onChange={onChange}
        OnCreate={onCreate}
      />
      <UserList
        users={users}
        onToggle={onToggle}
        onRemove={onRemove}  
      />
      <div>활성사용자 수 : 0</div>
    </>
  )
}

export default App
